GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


      ok investment levels generation and transmission
      ok changes in welfare
      - electricity prices
      - generator profits
   7   
   8  ***--------------------------------------------------------------------------***
   9  ***                             GENERAL OPTIONS                              ***
  10  ***--------------------------------------------------------------------------***
  11   
  12  option  optcr = 0.0001
  13          limrow = 0,
  14  *equations listed per block */
  15          limcol = 0
  16  *variables listed per block */
  17          solprint = off,
  18  *solver's solution output printed */
  19          sysout = off,
  20  *define standard solver
  21          QCP = Gurobi,
  22          LP = Gurobi
  23  ;
  24   
  25  ***--------------------------------------------------------------------------***
  26  ***            OPTIONS FOR DIFFERENT SCENARIOS & LINE INVESTMENT             ***
  27  ***--------------------------------------------------------------------------***
  28   
  29  *** Consideration of RES (on, off)
  31   
  32  Sets
  33           L "indices for power lines"     / 1 * 3 /
  34           LineInvest                      / 1 * 3 /
  35           Loop_Probability                / 1 * 2 /
  36           results                         / "CS", "PS", "CR", "ALL"
  37                                             "RD_G", "RD_B","RD_L", "SP_G", "SP_P"
  38                                             "C_L", "C_B" , "C_G",
  39                                             "p_sp", "p_rd", "p_cr" /  ;
  40   
  41  ***--------------------------------------------------------------------------***
  42  ***             LOAD DATA AND SETUP FOR LOOP WITH PROBABILITIES              ***
  43  ***--------------------------------------------------------------------------***
  44   
INCLUDE    C:\Users\ba62very\MyGit\risk-aversion\GAMS\Input_2Nodes.gms
  46  *** General Sets ***
  47   
  48    Sets
  49    T    "indices for times"       / 1 *  400 /
  50    N    "indices for nodes"       / 1 *   2 /
  51    G    "indices for generators"  / 1 *   8 /
  52    D(N) "indices for consumers"   / 1 *   2 /
  53    Z    "indices for zones"       / 1 *   2 /
  54    S    "indices for scenarios"   / 1 *   2 /
  55    B    "indices for backup"      / 1 *   2 /
  56    ;
  57   
  58    Alias (n,nn) ;
  59   
  60    Scalars
  61    M              bigM                                  / 10000    /
  62    epsilon        elacticity of demand                  /    -0.10 /
  63    Year           Hours per year                        /  8760    /
  64    buFixInv       Annuity per 1 MW backup capacity      / 32000    /
  65    DSM            Load Shedding costs                   /  3000    /
  66    buVarInv       Variable cost per MWh for backup      /    79    /
  67    L_step         Capacity steps for lines              /     0.01 /
  68    L_cost         Cost for 0.01 line capacity           /   250    /
  69    ;
  70   
  71  *** Line Parameters ***
  72   
  73    Parameters
  74    lineIsNew(L)   "candidate line"
  75    lineGamma(L)   "susceptance"
  76    lineUB(L)      "thermal capacity"
  77    lineStart(L)   "start node"
  78    lineEnd(L)     "end node"
  79    lineFixInv(L)  "line investment cost (candidate lines)"
  80    lineInter(S,L) "line is interzone link"
  81   
  82  *** Generator Parameters ***
  83   
  84    genIsRES(G)    "renewable generator"                   / 7 1, 8 1 /
  85    genAtNode(G)   "location (node)"                       / 1 1, 2 1, 3 1, 4 2, 5 2, 6 2, 7 1, 8 2 /
  86    genVarInv(G)   "variable cost"                         / 1 51, 2 50, 3 79, 4 54, 5 50, 6 79 /
  87    genFixInv(G)   "investment cost"                       / 1 93000, 2 58000, 3 32000, 4 93000, 5 58000, 6 32000, 7 78000, 8 93000 /
  88    buAtNode(B)    "location (node) of backup"             / 1 1, 2 2 /
  89    probability(S) "probability for scenario S"
  90    avail(T,G)     "availability of generators"
  91   
  92  *** Demand Parameters ***
  93    consAtNode(D)   "location (node)"                      / 1 1, 2 2 /
  94    qPeak(D)        "peak consumption at consumer D"       / 1 0.3, 2 0.7 /
  95    consObjB(D,T)   "slope demand function"
  96    consObjA(D,T)   "intercept demand function"
  97    periodScale(T)  "occurence of scenarios"
  98    dRef(T)         "reference demand per season"
  99    pRef(T)         "reference price"
 100   
 101  *** Risk Aversion Parameters ***
 102    weight_sp     "weight assigned to the worst-case spot market outcome for risk averse market participants"   /1/
 103    weight_rd     "weight assigned to the worst-case redispacth outcome for risk averse market participants"    /1/
 104    percentile      "lower percentile of welfare function that is considered to be the worst case"                /0.2/
 105    ;
 106   
 107    lineIsNew(L)     = 1 ;
 108    lineGamma(L)     = 1 ;
 109    lineUB(L)        = ( L.Val - 1 ) * L_step ;
 110    lineStart(L)     = 1 ;
 111    lineEnd(L)       = 2 ;
 112    lineFixInv(L)    = L_cost * L_step / 0.01 * ( L.Val - 1 ) ;
 113    lineInter("2",L) = 1 ;
 114   
 115   
 116    Table
 117    ConsInZone(D,S) "consumer in zone" 1     2
 118                                   1   1     1
 119                                   2   1     2
 120    ;
 121   
 122   
 123    Table
 124    GenInZone(G,S) "generation in zone"  1   2
 125                                     1   1   1
 126                                     2   1   1
 127                                     3   1   1
 128                                     4   1   2
 129                                     5   1   2
 130                                     6   1   2
 131                                     7   1   1
 132                                     8   1   2
 133   
 134    ;
 135   
 136    Table
 137    NodeInZone(N,S) "node in zone" 1     2
 138                               1   1     1
 139                               2   1     2
 140    ;
 141   
 142   
 143  *** Read.csv Input Data
 144   
GDXIN   C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
--- LOAD  avail = 1:avail
 149   
GDXIN   C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
--- LOAD  periodScale = 1:periodScale
 154   
GDXIN   C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
--- LOAD  dRef = 1:dRef
 159   
GDXIN   C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
--- LOAD  pRef = 1:pRef
 164   
 165  *** Demand Curves ***
 166   
 167    consObjB(D,T) = (-1) * pRef(T) / ( dRef(T) * qPeak(D) * epsilon )      ;
 168    consObjA(D,T) =  pRef(T) + consObjB(D,T) * dRef(T) * qPeak(D)          ;
INCLUDE    C:\Users\ba62very\MyGit\risk-aversion\GAMS\Parameters_2Nodes.gms
 170    Parameters
 171   
 172    Test
 173   
 174  *welfare
 175    wf_sp                  "spot market welfare"
 176    wf_sc_sp(S)            "spot market welfare for scenario s"
 177    wf_SP_Test             "TEST"
 178    wf_sc_all(S)           "final welfare for scenario s"
 179    wf_all                 "final welfare"
 180    wf_SP_d(S,D)
 181  *  nodal_welfare(S,N)     "welfare for node d in scenario s"
 182   
 183  *costs
 184    ct_RD_TEST
 185  * COST_FC_G
 186    Cost_sc_rd_g(S)
 187    Cost_sc_rd_b(S)
 188    Cost_sc_rd_l(S)
 189    Cost_sc_sp_g(S)
 190    Cost_fc_l
 191    Cost_fc_b
 192    Cost_fc_g
 193    Cost_sc_cr(S)          "Congestion rent by scenario"
 194  *  genCost                "cost of generation investment"
 195  *  buCost
 196    rediCost(S)            "network costs and redispatch cost in scenario s"
 197    totalRediCost          "total redispatch cost for all scenarios"
 198    rediGenCost            "cost for generation redispatch in scenario s"
 199    rediBuCost             "variable cost for backup capacity in scenario s"
 200    Demand
 201  *investment
 202    SP_CAP_G(G)            "investment decision in conv. generation capacity of spot market level"
 203    RD_CAP_B(B)             "investment of backup generator B"
 204  *generation and demand
 205    SP_DEM(S,D,T)          "demand Spot"
 206    SP_GEN_G(S,G,T)        "generation amount Spot"
 207    RD_GEN_G(S,G,T)        "generation after Redispatch"
 208    RD_GEN_B(S,B,T)        "generation of backup capacity b in scenario s and time t"
 209    RD_DEM_L(S,D,T)        "load shedding"
 210  *  averageDemand(S,D,T)   "total redispatched demand of consumer d over all periods and scenarios"
 211   
 212  *prices
 213    priceD_Spot(S,D,T)     "price for consumer d in period t in scenario s"
 214    priceG_Spot(S,G,T)     "price for producer g in period t in scenario s"
 215    Price_SP_nodalAvg(S,N)
 216    Price_RD_Markup(S)
 217    Price_FI_nodal(S,N)
 218   
 219  *  avgPriceSpot(S)        "average price in scenario s"
 220  *  nodalAvgPriceSpot(S,N) "average price for node n in scenario s"
 221  *  totalAvgPriceSpot      "weighted average spot price over all scenarios"
 222  *transmission
 223    lineB(L)
 224    SP_FLOW(S,L,T)
 225    SP_CAP_L(L)
 226    RD_FLOW(S,L,T)         "flow through line L in scenario s and time t after redispatch"
 227  *  networkRevenues(S)     "network revenues in scenario s"
 228  *  networkFee(S)          "network fee in scenario s"
 229  *utilization
 230  *  avgGenUtilization(S,G) "average utilization of generator g in scenario s"
 231  *  avgLineUtilization(S)  "average utilization of transmission capacity in scenario s"
 232  *  avgBuUtilization(S,B)  "average utilization of backup b in scenario s"
 233   
 234   
 235    Loop_Probability_results(Loop_Probability,S);
 236   
 237    Parameters
 238    Loop_welfare_sp(Loop_Probability, LineInvest)          "spot market welfare"
 239    Loop_welfare_sp_sc(Loop_Probability,LineInvest,S)      "spot market welfare for scenario s"
 240    Loop_welfare_all_sc(Loop_Probability,LineInvest,S)     "welfare for scenario s"
 241    Loop_welfare_all(Loop_Probability,LineInvest)          "total welfare"
 242    Loop_welfare_sp_TEST(Loop_Probability, LineInvest)
 243    Loop_welfare_sp_sc_d(Loop_Probability, LineInvest,S,D)
 244   
 245    Loop_genInv(Loop_Probability, LineInvest, G)           "generation investment"
 246    Loop_lineInv(Loop_Probability,LineInvest)              "cost of line investement"
 247   
 248    Loop_price_SP_D(Loop_Probability,LineInvest,S,D,T)     "price for consumer d in period t in scenario s"
 249    Loop_price_SP_G(Loop_Probability,LineInvest,S,G,T)     "price for generators g in period t in scenario s"
 250    Loop_price_SP_nodal(Loop_Probability,LineInvest,S,N)
 251    Loop_price_RD_markup(Loop_Probability,LineInvest,S,results)
 252    Loop_price_Final(Loop_Probability,LineInvest,S,N)
 253   
 254    Loop_results_rents_A(Loop_Probability,LineInvest,S,results)
 255    Loop_results_rents_N(Loop_Probability,LineInvest,S,N,results)
 256    Loop_rents_CS(Loop_Probability,LineInvest,D,S)
 257    Loop_rents_PS(Loop_Probability,LineInvest,G,S)
 258    Loop_profits_PS(Loop_Probability,LineInvest,G,S)
 259   
 260    Loop_redispatch_TEST(Loop_Probability, LineInvest)
 261    Loop_redispatch(Loop_Probability, LineInvest)
 262    Loop_redispatch_sc(Loop_Probability, LineInvest,s)
 263   
 264    Loop_demand(Loop_Probability, LineInvest,S,N)
 265    Loop_nodal(Loop_Probability, LineInvest,S,N,results)
 266   
        Loop_nodal_welfare(Loop_Probability, LineInvest, S,N)  "welfare for node d in scenario s"
        Loop_avgPriceSpot(Loop_Probability,LineInvest,S)       "average price in scenario s"
        Loop_nodalAvgPriceSpot(Loop_Probability,LineInvest,S,N)"average price for node n in scenario s"
       
        Loop_genCost(Loop_Probability,LineInvest)              "cost of generation investment"
        Loop_buCost(Loop_Probability,LineInvest)               "cost of generation investment"
       
       
        Loop_buInv(Loop_Probability, LineInvest, B)            "generation investment backup capacity"
      *  Loop_resInv(Loop_Probability, LineInvest, R)           "generation investment RES capacity"
        Loop_totalAvgPriceSpot(Loop_Probability, LineInvest)   "weighted average spot price over all scenarios"
        Loop_demand(Loop_Probability, LineInvest,S,D,T)        "redispatched demand of consumer D"
        Loop_avgPriceCons(Loop_Probability, LineInvest, S,D)   "weighted average price at consumer d in scenario s over all periods"
       
       
        Loop_rediCost(Loop_Probability, LineInvest, S)         "redispatch cost in scenario s"
        Loop_totalRediCost(Loop_Probability, LineInvest)       "total redispatch cost in all scenarios"
        Loop_rediGenCost(Loop_Probability, LineInvest, S)      "cost for generation redispatch in scenario s"
        Loop_rediBuCost(Loop_Probability, LineInvest, S)       "variable cost for backup capacity in scenario s"
       
       
        Loop_flowFinal(Loop_Probability, LineInvest, S,L,T)            "flow through line L in scenario s and time t after redispatch"
        Loop_generationBU(Loop_Probability, LineInvest,S,B,T)          "generation of backup capacity b in scenario s and time t"
        Loop_generation(Loop_Probability, LineInvest,S,G,T)            "generation of generator g in scenario s and time t"
        Loop_totalLineCapacity(Loop_Probability, LineInvest)           "total line capacity"
        Loop_avgGenUtilization(Loop_Probability, LineInvest, S,G)      "average utilization of generator g in scenario s"
        Loop_avgLineUtilization(Loop_Probability, LineInvest,S)        "average utilization of transmission capacity in scenario s"
        Loop_avgBuUtilization(Loop_Probability, LineInvest, S,B)       "average utilization of backup b in scenario s"
        Loop_networkFee(Loop_Probability, LineInvest, S)               "network fee in scenario s"
        Loop_networkRev(Loop_Probability,LineInvest,S)                 "Congestion rents"
        Loop_results_rents_N(Loop_Probability,LineInvest,S,N,results)
       
        Loop_price_comp(Loop_Probability,LineInvest,N,results)
        Loop_RD_comp(Loop_Probability,LineInvest,N,results)
        Loop_CR_comp(Loop_Probability,LineInvest,N,S)
        Loop_results_price_N(Loop_Probability,LineInvest,S,N,results)
        Loop_results_price_A(Loop_Probability,LineInvest,S,results)
 306  ;
INCLUDE    C:\Users\ba62very\MyGit\risk-aversion\GAMS\model-risk-aversion.gms
 308  ***--------------------------------------------------------------------------***
 309  ***                           DEFINITION of VARIABLES                        ***
 310  ***--------------------------------------------------------------------------***
 311   
 312    Variables
 313  * objective values
 314    welfareSpot            "welfare in spot market"
 315    costRedispatch         "cost at redispatch level"
 316   
 317  * Spot Market
 318    f_sp(S,L,T)            "trade flow in spot market"
 319    zeta_sp                "other auxiliary variable to model CVAR in spot market stage"
 320  * Redispatch
 321    f_rd(S,L,T)            "transmission flows redispatch"
 322    angle(S,N,T)           "phase angle in redispatch model"
 323    zeta_rd                "other auxiliary variable to model CVAR in redispatch stage"
 324    ;
 325   
 326    Positive Variables
 327  * Spot Market
 328    d_sp(S,D,T)            "demand spot market"
 329    g_sp(S,G,T)            "generation amount spot market"
 330    ig_sp(G)               "installed capacity of generators in spot market"
 331  * Risk Aversion
 332    eta_sp(S)              "auxiliary variable to model CVAR in spot market stage"
 333   
 334   
 335  * Redispatch
 336    d_rd(S,D,T)            "demand redispatcht"
 337    g_rd(S,G,T)            "generation amount redispatch"
 338    gb_rd(S,B,T)           "generation backup capacity redispatch"
 339    ib_rd(B)               "investment in backup capacity redispatch"
 340    g_n_rd(S,G,T)          "negative generation redispatch"
 341    g_p_rd(S,G,T)          "positive generation redispatch"
 342    ls_rd(S,D,T)           "load shedding redispatch"
 343  * Risk Aversion
 344    eta_rd(S)              "auxiliary variable to model CVAR in redispatch stage"
 345    ;
 346   
 347  *  Binary Variable
 348  *  lineB(L)               "line is built?"
 349  *  ;
 350   
 351  ***--------------------------------------------------------------------------***
 352  ***                          SPOT MARKET MODEL                               ***
 353  ***--------------------------------------------------------------------------***
 354   
 355  *** Objective function
 356    Equation welfSpot;
 357    welfSpot..         welfareSpot =e= (1-weight_sp)*sum(S$probability(S), probability(S)
 358                                        * ( sum((D,T), periodScale(T)*( consObjA(D,T) * d_sp(S,D,T)
 359                                        - 0.5 * consObjB(D,T) * d_sp(S,D,T) * d_sp(S,D,T) ) )
 360                                        - sum((G,T), genVarInv(G) * g_sp(S,G,T) * periodScale(T) ) ) ) * Year
 361                                        - sum(G, genFixInv(G) * ig_sp(G) )
 362                                        + weight_sp*(zeta_sp - (1/(1-percentile)*sum(S$probability(S), probability(S) * eta_sp(S)))) ;
 363   
 364  *** Conditional Value at Risk Restrictions ***
 365    Equation CVARSpot;
 366    CVARSpot(S)$probability(S)..
 367          zeta_sp - ( sum((D,T), periodScale(T)*( consObjA(D,T) * d_sp(S,D,T)
 368                  - 0.5 * consObjB(D,T) * d_sp(S,D,T) * d_sp(S,D,T) ) )
 369                  - sum((G,T), genVarInv(G) * g_sp(S,G,T) * periodScale(T) ) )  * Year
 370                  - sum(G, genFixInv(G) * ig_sp(G)) =l=eta_sp(S)
 371   
 372  *** Zonal First Kirchhoffs Law
 373   
 374    Equation ZFKL;
 375    ZFKL(S,Z,T)$probability(S)..
 376   
 377           sum(D$(consInZone(D,S) = Z.val), d_sp(S,D,T)) =e=
 378                       sum(G$(sum(N$(genAtNode(G) = N.val), NodeInZone(N,S)) = Z.val), g_sp(S,G,T) )
 379                     - sum(L$(sum(N$(lineStart(L) = N.val), NodeInZone(N,S)) = Z.val and lineInter(S,L) = 1), f_sp(S,L,T))
 380                     + sum(L$(sum(N$(lineEnd(L) = N.val),   NodeInZone(N,S)) = Z.val and lineInter(S,L) = 1), f_sp(S,L,T)) ;
 381   
 382  *** Market Coupling Flow Restrictions
 383   
 384    Equation MCF1;
 385    MCF1(S,L,T)$(lineInter(S,L) = 1 and lineIsNew(L) = 0)..   f_sp(S,L,T) =l= lineUB(L);
 386    Equation MCF2;
 387    MCF2(S,L,T)$(lineInter(S,L) = 1 and lineIsNew(L) = 0).. - lineUB(L)=l= f_sp(S,L,T);
 388    Equation MCF3;
 389    MCF3(S,L,T)$(lineInter(S,L) = 1 and lineIsNew(L) = 1)..   f_sp(S,L,T) =l= lineB(L) * lineUB(L);
 390    Equation MCF4;
 391    MCF4(S,L,T)$(lineInter(S,L) = 1 and lineIsNew(L) = 1).. - lineB(L) * lineUB(L) =l= f_sp(S,L,T);
 392   
 393  ***Generation Capacity Limits
 394   
 395    Equation GCLSpot ;
 396    GCLSpot(S,G,T)..  g_sp(S,G,T) =l= avail(T,G) * ig_sp(G) ;
 397   
 398   
 399  ***--------------------------------------------------------------------------***
 400  ***                     NETWORK- and REDISPATCH LEVEL                        ***
 401  ***--------------------------------------------------------------------------***
 402   
 403    Equation costRed ;
 404    costRed..         costRedispatch =e= (1-weight_rd)*sum(S$probability(S), probability(S)
 405                                           * ( sum((G,T), genVarInv(G) * ( g_rd(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T) ) * YEAR
 406                                             + sum((B,T), buVarInv * gb_rd(S,B,T) * periodScale(T) ) * YEAR ) )
 407                                             + sum(B, buFixInv * ib_rd(B) )
 408                                             + sum(L$(lineIsNew(L) = 1), lineFixInv(L) * lineB(L))
 409                                             - weight_rd*(zeta_rd - (1/(1-percentile)*sum(S$probability(S), probability(S) * eta_rd(S))));
 410   
 411  *** Conditional Value at Risk Restrictions ***
 412    Equation CVARRed;
 413    CVARRed(S)$probability(S)..
 414          zeta_rd - ( sum((G,T), genVarInv(G) * ( g_rd(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T) ) * YEAR
 415                                             + sum((B,T), buVarInv * gb_rd(S,B,T) * periodScale(T) ) * YEAR )
 416                                             + sum(B, buFixInv * ib_rd(B) )
 417                                             + sum(L$(lineIsNew(L) = 1), lineFixInv(L) * lineB(L) ) =l=eta_rd(S)
 418   
 419  ***First Kirchhoffs Law
 420   
 421    Equation FKL;
 422    FKL(S,N,T)$probability(S)..   sum(D$(consAtNode(D) = N.val), SP_DEM(S,D,T)) =e=
 423                   sum(G$(genAtNode(G)   = N.val), g_rd(S,G,T))
 424                   + sum(B$(buAtNode(B)  = N.val), gb_rd(S,B,T))
 425                   + sum(L$(lineEnd(L)   = N.val), f_rd(S,L,T))
 426                   - sum(L$(lineStart(L) = N.val), f_rd(S,L,T)) ;
 427   
 428  ***Second Kirchhoffs Law
 429   
 430    Equation SKL1;
 431    SKL1(S,L,T)$(lineIsNew(L) = 0).. f_rd(S,L,T) + lineGamma(L) * (sum(N$(lineStart(L) = N.val), angle(S,N,T)) - sum(N$(lineEnd(L) = N.val), angle(S,N,T))) =e= 0;
 432    Equation SKL2;
 433    SKL2(S,L,T)$(lineIsNew(L) = 1).. - M * (1 - lineB(L)) =l=  f_rd(S,L,T) + lineGamma(L) * (sum(N$(lineStart(L) = N.val), angle(S,N,T)) - sum(N$(lineEnd(L) = N.val), angle(S,N,T)));
 434    Equation SKL3;
 435    SKL3(S,L,T)$(lineIsNew(L) = 1).. f_rd(S,L,T) + lineGamma(L) * (sum(N$(N.val = lineStart(L)), angle(S,N,T)) - sum(N$(N.val = lineEnd(L)), angle(S,N,T))) =l= M * (1 - lineB(L));
 436   
 437  ***Voltage Phase Angle
 438   
 439    Equation VPA;
 440    VPA(S,N,T)$(N.val = 1).. angle(S,N,T) =e= 0;
 441   
 442  ***Trasmission Flow Limits
 443   
 444    Equation TFL1;
 445    TFL1(S,L,T)$(lineIsNew(L) = 0)..   f_rd(S,L,T) =l= lineUB(L);
 446    Equation TFL2;
 447    TFL2(S,L,T)$(lineIsNew(L) = 0).. - lineUB(L) =l= f_rd(S,L,T);
 448    Equation TFL3;
 449    TFL3(S,L,T)$(lineIsNew(L) = 1)..   f_rd(S,L,T) =l= lineB(L) * lineUB(L);
 450    Equation TFL4;
 451    TFL4(S,L,T)$(lineIsNew(L) = 1).. - lineB(L) * lineUB(L) =l= f_rd(S,L,T);
 452   
 453  ***Generation Capacity Limits (Redispatch Level)
 454   
 455    Equation GCLRed;
 456    GCLRed(S,G,T)$probability(S).. g_rd(S,G,T) =l= avail(T,G) * SP_CAP_G(G) ;
 457   
 458    Equation GCLBu;
 459    GCLBu(S,B,T)$probability(S)..  gb_rd(S,B,T) =l= ib_rd(B) ;
 460   
 461  *** Fix Spot Market and Redispatch Quantities
 462   
 463    Equation fixDem;
 464    fixDem(S,D,T)$probability(S).. d_rd(S,D,T) =e= SP_DEM(S,D,T)
 465  *- ls_rd(S,D,T)
 466    ;
 467   
 468    Equation fixGen;
 469    fixGen(S,G,T)$probability(S).. g_rd(S,G,T) =e= SP_GEN_G(S,G,T) + g_p_rd(S,G,T) - g_n_rd(S,G,T);
 470   
 471  ***--------------------------------------------------------------------------***
 472  ***                           DEFINITION MODELS                              ***
 473  ***--------------------------------------------------------------------------***
 474   
 475    Model Spotmarket
 476    / welfspot,
 477      ZFKL,
 478      MCF1,
 479      MCF2,
 480      MCF3,
 481      MCF4,
 482      GCLSpot /;
 483   
 484    Model Redispatch
 485    / costRed,
 486      FKL,
 487      SKL1,
 488      SKL2,
 489      SKL3,
 490      VPA,
 491      TFL1,
 492      TFL2,
 493      TFL3,
 494      TFL4,
 495      GCLRed,
 496      GCLBu,
 497      fixDem,
 498      fixGen /;
 499   
 500  ***--------------------------------------------------------------------------***
 501  ***                           END MODEL SECTION                              ***
 502  ***--------------------------------------------------------------------------***
 503   
 504  *** read gurobi.opt
 505  *  Spotmarket.OptFile = 1 ;
 506  *  RedispatchWelfare.OptFile = 1 ;
 507   
 508  *** time after whcih the solver terminates:
 509   Spotmarket.reslim = 10000;
 510   Redispatch.reslim = 36000;
 511   
 512   Alias(LineInvest,LineInvest2) ;
 513   
 514   Loop_Probability_results(Loop_Probability,'1')  = 1 - (Loop_Probability.val-1) * 0.1  ;
 515   Loop_Probability_results(Loop_Probability,'2')  =     (Loop_Probability.val-1) * 0.1  ;
 516   
 517  ***--------------------------------------------------------------------------***
 518  ***           START MODEL LOOP FOR PROBABILITIES AND LINE INVEST             ***
 519  ***--------------------------------------------------------------------------***
 520   
 521   Loop(Loop_Probability,
 522   
 523     probability('1') = 1 - (Loop_Probability.val-1) * 0.1 ;
 524     probability('2') =     (Loop_Probability.val-1) * 0.1 ;
 525   
 526       Loop(LineInvest,
 527   
 528         lineB(L) = 1$(LineInvest.val=L.val);
 529   
 530  *exclude Wind generation in conventional case
 531  *change buVarInv (Input_2Nodes.gms) for each case 68 / 79
 533   genVarInv('1') = 35 ;
 534   genVarInv('2') = 43 ;
 535   genVarInv('3') = 68 ;
 536   genVarInv('4') = 38 ;
 537   genVarInv('5') = 43 ;
 538   genVarInv('6') = 68 ;
 539   genVarInv('7') = 0 ;
 540   genVarInv('8') = 0 ;
 542   
 543  ***--------------------------------------------------------------------------***
 544  ***                        SOLVE SPOT MARKET MODEL                           ***
 545  ***--------------------------------------------------------------------------***
 546   
 547    option clear= welfareSpot ;
 548    option clear= d_sp        ;
 549    option clear= g_sp        ;
 550    option clear= ig_sp       ;
 551    option clear= f_sp        ;
 552   
 553    SOLVE Spotmarket USING QCP MAXIMIZE welfareSpot ;
 554   
 555    SP_DEM(S,D,T)   = d_sp.l(S,D,T)          ;
 556    SP_GEN_G(S,G,T) = g_sp.l(S,G,T)          ;
 557    SP_CAP_G(G)     = ig_sp.l(G)             ;
 558    SP_FLOW(S,L,T)  = f_sp.l(S,L,T)          ;
 559    SP_CAP_L(L)     = lineB(L) * lineUB(L)   ;
 560   
 561    wf_sc_SP(S)$probability(S)         = ( sum((D,T), ( consObjA(D,T) * SP_DEM(S,D,T) - 0.5 * consObjB(D,T) * SP_DEM(S,D,T) * SP_DEM(S,D,T) ) * periodScale(T) )
 562                                         - sum((G,T), genVarInv(G) * SP_GEN_G(S,G,T) * periodScale(T) ) ) * YEAR
 563                                         - sum(G, genFixInv(G) * SP_CAP_G(G)) ;
 564    wf_SP                              = sum(S$probability(S), probability(S) * wf_sc_SP(S) ) ;
 565    wf_SP_TEST                         = welfareSpot.l ;
 566    priceD_Spot(S,D,T) $probability(S) = ( consObjA(D,T) - consObjB(D,T) * SP_DEM(S,D,T) ) ;
 567    priceG_Spot(S,G,T) $probability(S) = sum(Z$(Z.val = GenInZone(G,S)), ZFKL.m(S,Z,T) / Year / periodScale(T) / probability(S));
 568    wf_SP_d(S,D)       $probability(S) = ( sum(T, (consObjA(D,T) * SP_DEM(S,D,T) - 0.5 * consObjB(D,T) * SP_DEM(S,D,T) * SP_DEM(S,D,T)) * periodScale(T) )
 569                                         - sum(T, priceD_Spot(S,D,T)  * SP_DEM(S,D,T) * periodScale(T) ) ) * YEAR;
 570   
 571  *  avgPriceSpot(S)    $probability(S) = sum((D,T), demSpot(S,D,T) * priceSpot(S,D,T) * periodScale(T) ) / sum((D,T), demSpot(S,D,T) * periodScale(T) );
 572  *  totalAvgPriceSpot = sum(S$probability(S),Probability(S)*(sum((D,T), demSpot(S,D,T) * priceSpot(S,D,T) * Year * periodScale(T) ) / sum((D,T), demSpot(S,D,T) * Year * periodScale(T) )));
 573   
        option clear= welfareSpot ;
        option clear= d_sp        ;
        option clear= g_sp        ;
        option clear= ig_sp       ;
        option clear= f_sp        ;
 581   
 582  ***--------------------------------------------------------------------------***
 583  ***                         SOLVE REDISPATCH MODEL                           ***
 584  ***--------------------------------------------------------------------------***
 585   
 586   
 587    option clear = costRedispatch ;
 588    option clear = f_rd   ;
 589    option clear = angle  ;
 590    option clear = d_rd   ;
 591    option clear = g_rd   ;
 592    option clear = gb_rd  ;
 593    option clear = ib_rd  ;
 594    option clear = g_n_rd ;
 595    option clear = g_p_rd ;
 596   
 597    SOLVE Redispatch USING LP MINIMIZE costRedispatch ;
 598   
 599    RD_GEN_G(S,G,T) = g_rd.l(S,G,T)  ;
 600    RD_CAP_B(B)     = ib_rd.l(B)     ;
 601    RD_GEN_B(S,B,T) = gb_rd.l(S,B,T) ;
 602  *  RD_DEM_L(S,D,T) = ls_rd.l(S,D,T) ;
 603   
 604    ct_RD_TEST      = costRedispatch.l      ;
 605    Test = sum(S$probability(S), probability(S)
 606                                           * ( sum((G,T), genVarInv(G) * ( g_rd.l(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T) ) * YEAR
 607                                             + sum((B,T), buVarInv * gb_rd.l(S,B,T) * periodScale(T) ) * YEAR ) )
 608  *                                         + sum((D,T), DSM * ls_rd(S,D,T) * periodScale(T) ) * YEAR )
 609                                             + sum(B, buFixInv * ib_rd.l(B) )
 610                                             + sum(L$(lineIsNew(L) = 1), lineFixInv(L) * lineB(L) ) ;
 611   
 612   
 613  Display test;
        option clear = costRedispatch ;
        option clear = f_rd   ;
        option clear = angle  ;
        option clear = d_rd   ;
        option clear = g_rd   ;
        option clear = gb_rd  ;
        option clear = ib_rd  ;
        option clear = g_n_rd ;
        option clear = g_p_rd ;
 625   
 626  ***--------------------------------------------------------------------------***
 627  ***                        CALCULATION OF RESULTS                            ***
 628  ***--------------------------------------------------------------------------***
 629   
 630  *Calculate variable generation costs per scenario (fuel + CO2)
 631    Cost_sc_sp_g(S)$probability(S)    = sum((G,T),                genVarInv(G) * SP_GEN_G(S,G,T) * periodScale(T) * YEAR ) ;
 632  *Calculate redispatch costs existing capacity per scenario
 633    Cost_sc_rd_g(S)$probability(S) = sum((G,T), genVarInv(G) * ( RD_GEN_G(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T) ) * Year ;
 634  *Calculate redispatch costs backup capacity per scenario
 635    Cost_sc_rd_b(S)$probability(S) = sum((B,T),  buVarInv    * ( RD_GEN_B(S,B,T)                   ) * periodScale(T) ) * Year ;
 636  *Calculate redispatch costs backup capacity per scenario
 637  *  Cost_sc_rd_l(S)$probability(S) = sum((D,T),  DSM         * ( RD_DEM_L(S,D,T)                   ) * periodScale(T) ) * Year ;
 638  *Calculate total congestion rent per scenario
 639    Cost_sc_cr(S)$probability(S)   = sum((L,T)$lineB(L), YEAR * periodScale(T) * abs( SP_FLOW(S,L,T) ) * abs(sum(D$(lineStart(L) =D.val), PriceD_Spot(S,D,T)) - sum(D$(lineEnd(L) = D.val), PriceD_Spot(S,D,T))));
 640    Cost_fc_l                      = sum(L$SP_CAP_L(L),        lineFixInv(L) ) ;
 641    Cost_fc_b                      = sum(B,                    buFixInv     * RD_CAP_B(B) ) ;
 642    Cost_fc_g                      = sum(G,                    genFixInv(G) * SP_CAP_G(G) ) ;
 643   
 644  *Calculate all network & backup investment and redispatch costs per scenario
 645    rediCost(S)$probability(S)     = sum((G,T), genVarInv(G) * ( RD_GEN_G(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T)) * YEAR
 646                                    + sum((B,T), buVarInv * RD_GEN_B(S,B,T) * periodScale(T) ) * YEAR
 647  *                                  + sum((D,T), DSM * RD_DEM_L(S,D,T) * periodScale(T) ) * YEAR
 648                                    + sum(B, buFixInv * RD_CAP_B(B))
 649                                    + sum(L$SP_CAP_L(L), lineFixInv(L) )
 650   
 651  ;
 652  *Calculate all network & backup investment and redispatch costs
 653    totalRediCost                  = sum(S$probability(S), probability(S) * ( sum((G,T), genVarInv(G) * ( RD_GEN_G(S,G,T) - SP_GEN_G(S,G,T) ) * periodScale(T) )
 654                                    + sum((B,T), buVarInv * RD_GEN_B(S,B,T) * periodScale(T) ) )
 655  *                                  + sum((D,T), DSM * RD_DEM_L(S,D,T) * periodScale(T) ) * YEAR)
 656                                    ) * YEAR
 657                                    + sum(B, buFixInv * RD_CAP_B(B))
 658                                    + sum(L$SP_CAP_L(L), lineFixInv(L) ) ;
 659   
 660  *Welfare after redispatch and investment costs in scenario S
 661    wf_sc_all(S)$probability(S)    = ( sum((D,T), ( consObjA(D,T) * SP_dem(S,D,T) - 0.5 * consObjB(D,T) * SP_dem(S,D,T) * SP_dem(S,D,T) ) * periodScale(T) )
 662                                     - sum((G,T), genVarInv(G) * RD_GEN_G(S,G,T) * periodScale(T) )
 663                                     - sum((B,T), buVarInv     * RD_GEN_B(S,B,T) * periodScale(T) ) ) * Year
 664                                       - sum(G,             genFixInv(G)  * SP_CAP_G(G) )
 665                                       - sum(B,             buFixInv      * RD_CAP_B(B) )
 666                                       - sum(L$SP_CAP_L(L), lineFixInv(L) ) ;
 667   
 668  *Welfare after redispatch for both scenarios
 669    wf_all                         = sum(S$probability(S), probability(S) * wf_sc_all(S) ) ;
 670   
 671  *Prices
 672    Price_SP_nodalAvg(S,N)$(sum((D,T)$(consAtNode(D) = N.val), SP_DEM(S,D,T))) = sum((D,T)$(consAtNode(D) = N.val), SP_DEM(S,D,T) * PriceD_Spot(S,D,T) * Year * periodScale(T))
 673                                                                               / sum((D,T)$(consAtNode(D) = N.Val), SP_DEM(S,D,T) * Year * periodScale(T) );
 674   
 675    Price_RD_Markup(S)$probability(S)  = ( Cost_sc_rd_g(S) + Cost_sc_rd_b(S) - Cost_sc_cr(S) + Cost_fc_l + Cost_fc_b ) / sum((D,T), SP_DEM(S,D,T) * periodScale(T) * YEAR ) ;
 676   
 677    Price_FI_nodal(S,N)$probability(S) = Price_SP_nodalAvg(S,N) + Price_RD_Markup(S) ;
 678   
 679    Demand(s,'1')$probability(S)         = sum(t, SP_DEM(s,'1',t) * periodScale(T) * YEAR ) ;
 680    Demand(s,'2')$probability(S)         = sum(t, SP_DEM(s,'2',t) * periodScale(T) * YEAR ) ;
 681   
      *Nodal welfare in scenario S
      *MISSING TRADE FLOWS !!!!
        nodal_welfare(S,N)$probability(S) = (sum((D,T)$(consAtNode(D) = N.val), (consObjA(D,T) * dem.l(S,D,T) - 0.5 * consObjB(D,T) * dem.l(S,D,T) * dem.l(S,D,T)) * periodScale(T))
                               - sum((G,T)$(genAtNode(G) = N.val), genVarInv(G) * gen.l(S,G,T) * periodScale(T)) - sum((B,T)$(buAtNode(B) = N.val), buVarInv * genBU.l(S,B,T) * periodScale(T))) * Year
                               - sum(G$(genAtNode(G)=N.val), genFixInv(G) * genC.l(G))
                               - sum(B$(buAtNode(B) = N.val), buFixInv * genCbu.l(B))
                               - sum(L$(lineIsNew(L) = 1), lineFixInv(L) * lineB.l(L));
       
 692   
 693  ***--------------------------------------------------------------------------***
 694  ***                       RESULTS to LOOP-PARAMETER                          ***
 695  ***--------------------------------------------------------------------------***
 696   
 697    Loop_welfare_sp_sc(Loop_Probability, LineInvest,S)     = wf_sc_SP(S)   ;
 698    Loop_welfare_sp(Loop_Probability, LineInvest)          = wf_SP         ;
 699    Loop_welfare_all_sc(Loop_Probability,LineInvest,S)     = wf_sc_all(S)  ;
 700    Loop_welfare_all(Loop_Probability, LineInvest)         = wf_all        ;
 701    Loop_welfare_sp_TEST(Loop_Probability, LineInvest)     = wf_sp_TEST    ;
 702    Loop_welfare_sp_sc_d(Loop_Probability, LineInvest,S,D) = wf_sp_d(S,D)  ;
 703   
 704    Loop_nodal(Loop_Probability,LineInvest,S,'1',"CS")$probability(S) = ( sum((D,T), ( consObjA('1',T) * SP_dem(S,'1',T) - 0.5 * consObjB('1',T) * SP_dem(S,'1',T) * SP_dem(S,'1',T) ) * periodScale(T) ) ) * YEAR ;
 705    Loop_nodal(Loop_Probability,LineInvest,S,'2',"CS")$probability(S) = ( sum((D,T), ( consObjA('2',T) * SP_dem(S,'2',T) - 0.5 * consObjB('2',T) * SP_dem(S,'2',T) * SP_dem(S,'2',T) ) * periodScale(T) ) ) * YEAR;
 706    Loop_nodal(Loop_Probability,LineInvest,S,N,"SP_G")$probability(S) = sum(G$(ord(N)=genAtNode(G)),
 707                                                                           sum(T, genVarInv(G) * SP_GEN_G(S,G,T) * periodScale(T) ) ) * Year ;
 708    Loop_nodal(Loop_Probability,LineInvest,S,N,"SP_P")$probability(S) = sum(G$(ord(N)=genAtNode(G)),
 709                                                                           sum(T, priceG_Spot(S,G,T)  * SP_GEN_G(S,G,T) * periodScale(T) ) ) * Year ;
 710    Loop_nodal(Loop_Probability,LineInvest,S,N,"SP_P")$probability(S) = sum(G$(ord(N)=genAtNode(G)),
 711                                                                           genFixInv(G) * SP_CAP_G(G) ) ;
 712    Loop_nodal(Loop_Probability,LineInvest,S,N,"CR")$probability(S)  = Cost_sc_cr(S) * Demand(s,n) / sum(nn, Demand(s,nn) ) ;
 713    Loop_nodal(Loop_Probability,LineInvest,S,N,"C_L")$probability(S) = Cost_fc_l * Demand(s,n) / sum(nn, Demand(s,nn) ) ;
 714    Loop_nodal(Loop_Probability,LineInvest,S,N,"C_B")$probability(S) = Cost_fc_b * Demand(s,n) / sum(nn, Demand(s,nn) ) ;
 715    Loop_nodal(Loop_Probability,LineInvest,S,N,"RD_G")$probability(S) = ( Cost_sc_rd_g(S) + Cost_sc_rd_b(S) ) * Demand(s,n) / sum(nn, Demand(s,nn) ) ;
 716   
 717    Loop_genInv(Loop_Probability, LineInvest, G)           = SP_CAP_G(G)   ;
 718    Loop_lineInv(Loop_Probability,LineInvest)              = sum(l, SP_CAP_L(L) ) ;
 719   
 720    Loop_price_SP_D(Loop_Probability,LineInvest,S,D,T)     = priceD_Spot(S,D,T)     ;
 721    Loop_price_SP_G(Loop_Probability,LineInvest,S,G,T)     = priceG_Spot(S,G,T)     ;
 722   
 723    Loop_price_SP_nodal(Loop_Probability,LineInvest,S,N)$probability(S)      = Price_SP_nodalAvg(S,N) ;
 724    Loop_price_RD_markup(Loop_Probability,LineInvest,S,"all")$probability(S) = Price_RD_Markup(S)     ;
 725    Loop_price_RD_markup(Loop_Probability,LineInvest,S,"CR")$probability(S)  = - Cost_sc_cr(S) / sum((D,T), SP_DEM(S,D,T) * periodScale(T) * YEAR )  ;
 726    Loop_price_RD_markup(Loop_Probability,LineInvest,S,"C_L")$probability(S) = + Cost_fc_l / sum((D,T), SP_DEM(S,D,T) * periodScale(T) * YEAR )      ;
 727    Loop_price_RD_markup(Loop_Probability,LineInvest,S,"C_B")$probability(S) = + Cost_fc_b / sum((D,T), SP_DEM(S,D,T) * periodScale(T) * YEAR )      ;
 728    Loop_price_RD_markup(Loop_Probability,LineInvest,S,"RD_G")$probability(S)= ( Cost_sc_rd_g(S) + Cost_sc_rd_b(S) ) / sum((D,T), SP_DEM(S,D,T) * periodScale(T) * YEAR )  ;
 729    Loop_price_Final(Loop_Probability,LineInvest,S,N)      = Price_FI_nodal(S,N)    ;
 730   
 731    Loop_demand(Loop_Probability, LineInvest,S,N)          = Demand(s,n) ;
 732   
      *Individual price components
        Loop_results_price_N(Loop_Probability,LineInvest,S,N,"p_sp")$probability(S) = sum(T, sum(D$(consAtNode(D)=ord(N)), ( priceSpot(S,D,T) * demSpot(S,D,T) ) * periodScale(T) ) )
                                                                               / sum(T, sum(D$(consAtNode(D)=ord(N)), demSpot(S,D,T) ) * periodScale(T) ) ;
       
        Loop_results_price_N(Loop_Probability,LineInvest,S,N,"p_rd")$probability(S) = rediCost(S) / ( sum((D,T), demSpot(S,D,T) * periodScale(T) ) * YEAR ) ;
       
        Loop_results_price_N(Loop_Probability,LineInvest,S,N,"p_cr")$probability(S) = -networkRevenues(S)/ ( sum((D,T), demSpot(S,D,T) * periodScale(T) ) * YEAR ) ;
       
        Loop_results_price_A(Loop_Probability,LineInvest,S,"p_sp")$probability(S) = sum((T,D), ( priceSpot(S,D,T) * demSpot(S,D,T) ) * periodScale(T) )
                                                                               / sum((T,D), demSpot(S,D,T) * periodScale(T) ) ;
        Loop_results_price_A(Loop_Probability,LineInvest,S,"p_rd")$probability(S) = Loop_results_price_N(Loop_Probability,LineInvest,S,'1',"p_rd") ;
        Loop_results_price_A(Loop_Probability,LineInvest,S,"p_cr")$probability(S) = Loop_results_price_N(Loop_Probability,LineInvest,S,'1',"p_cr") ;
       
 748   
 749    Loop_redispatch_TEST(Loop_Probability, LineInvest)   = ct_rd_TEST    ;
 750    Loop_redispatch_sc(Loop_Probability, LineInvest,s)   = RediCost(S) ;
 751    Loop_redispatch(Loop_Probability, LineInvest)        = totalRediCost ;
 752   
 753   
 754   
 755  *Individual rents for consumers, producers and TSOs
 756    Loop_rents_CS(Loop_Probability,LineInvest,D,S)$probability(S) = ( sum( (T), ( consObjA(D,T) * SP_dem(S,D,T) - 0.5 * consObjB(D,T) * SP_dem(S,D,T) * SP_dem(S,D,T) ) * periodScale(T) )
 757                                                                    - sum( (T), ( PriceD_Spot(S,D,T) * SP_dem(S,D,T) ) * periodScale(T) ) ) * YEAR ;
 758   
 759    Loop_rents_PS(Loop_Probability,LineInvest,G,S)$(probability(S) and SP_CAP_G(G)) =  ( sum( (T), ( PriceG_Spot(S,G,T) - genVarInv(G) ) * SP_GEN_G(S,G,T) * periodScale(T) ) * YEAR
 760                                                                                           - genFixInv(G) * SP_CAP_G(G) ) ;
 761   
 762    Loop_results_rents_N(Loop_Probability,LineInvest,S,N,"CS")               = sum(D$(consAtNode(D)=ord(N)), Loop_rents_CS(Loop_Probability,LineInvest,D,S) );
 763    Loop_results_rents_N(Loop_Probability,LineInvest,S,N,"PS")               = sum(G$(genAtNode(G)=ord(N)),  Loop_rents_PS(Loop_Probability,LineInvest,G,S) );
 764    Loop_results_rents_A(Loop_Probability,LineInvest,S,"CS")                 = sum(n, Loop_results_rents_N(Loop_Probability,LineInvest,S,N,"CS") ) ;
 765    Loop_results_rents_A(Loop_Probability,LineInvest,S,"PS")                 = sum(n, Loop_results_rents_N(Loop_Probability,LineInvest,S,N,"PS") ) ;
 766    Loop_results_rents_A(Loop_Probability,LineInvest,S,"CR")                 = Cost_sc_cr(S)   ;
 767    Loop_results_rents_A(Loop_Probability,LineInvest,S,"SP_G")               = Cost_sc_sp_g(S) ;
 768    Loop_results_rents_A(Loop_Probability,LineInvest,S,"RD_G")               = Cost_sc_rd_g(S) ;
 769    Loop_results_rents_A(Loop_Probability,LineInvest,S,"RD_B")               = Cost_sc_rd_b(S) ;
 770    Loop_results_rents_A(Loop_Probability,LineInvest,S,"SP_G")               = Cost_sc_sp_g(S) ;
 771    Loop_results_rents_A(Loop_Probability,LineInvest,S,"C_L")$probability(S) = Cost_fc_l ;
 772    Loop_results_rents_A(Loop_Probability,LineInvest,S,"C_B")$probability(S) = Cost_fc_b ;
 773    Loop_results_rents_A(Loop_Probability,LineInvest,S,"C_G")$probability(S) = Cost_fc_g ;
 774   
 775    Loop_profits_PS(Loop_Probability,LineInvest,G,S)$sum(T, SP_GEN_G(S,G,T)) = Loop_rents_PS(Loop_Probability,LineInvest,G,S) / ( sum(T, SP_GEN_G(S,G,T) * periodScale(T) ) * YEAR ) ;
 776   
 777   
 778  ***--------------------------------------------------------------------------***
 779  ***                     CLEAR PARAMETERs OF MODEL RUN                        ***
 780  ***--------------------------------------------------------------------------***
 781   
 782  * Clear Spot Resuls
 783    option clear= SP_DEM           ;
 784    option clear= SP_GEN_G         ;
 785    option clear= SP_CAP_G         ;
 786    option clear= SP_FLOW          ;
 787    option clear= SP_CAP_L         ;
 788   
 789    option clear= wf_sc_SP         ;
 790    option clear= wf_SP            ;
 791    option clear= wf_sp_TEST       ;
 792    option clear= wf_sp_d          ;
 793    option clear= priceD_Spot      ;
 794    option clear= priceG_Spot      ;
 795   
 796  * Clear RD Results
 797    option clear= RD_GEN_G         ;
 798    option clear= RD_CAP_B         ;
 799    option clear= RD_GEN_B         ;
 800    option clear= ct_RD_TEST       ;
 801   
 802  * Clear calculation results
 803    option clear= Cost_sc_sp_g     ;
 804    option clear= Cost_sc_rd_g     ;
 805    option clear= Cost_sc_rd_b     ;
 806    option clear= Cost_sc_cr       ;
 807    option clear= Cost_fc_l        ;
 808    option clear= Cost_fc_b        ;
 809    option clear= Cost_fc_g        ;
 810   
 811    option clear= rediCost         ;
 812    option clear= totalRediCost    ;
 813    option clear= wf_sc_all        ;
 814    option clear= wf_all           ;
 815   
 816    option clear= Price_SP_nodalAvg;
 817    option clear= Price_RD_Markup  ;
 818    option clear= Price_FI_nodal   ;
 819   
 820      );
 821    );
 822   
 823  ***--------------------------------------------------------------------------***
 824  ***                            END OF MODEL LOOP                             ***
 825  ***--------------------------------------------------------------------------***
 826   
 827   
 828  ***--------------------------------------------------------------------------***
 829  ***                 OUTPUT WITH RESULTS FOR BEST LINE INVEST                 ***
 830  ***--------------------------------------------------------------------------***
 831   
 832    Parameter
 833    Results_genInv(Loop_Probability,G)
 834    Results_lineInv(Loop_Probability)
 835   
 836    maxWelfare(Loop_Probability)
 837    Results_welfare_sp_sc(Loop_Probability,S)
 838    Results_welfare_sp(Loop_Probability)
 839    Results_welfare_sp_sc_d(Loop_Probability,S,D)
 840    Results_welfare_sp_test(Loop_Probability)
 841    Results_welfare_all_sc(Loop_Probability,S)
 842    Results_welfare_all(Loop_Probability)
 843   
 844   
 845    Results_redispatch_sc(Loop_Probability,S)
 846    Results_redispatch_all(Loop_Probability)
 847    Results_redispatch_all_TEST(Loop_Probability)
 848   
 849    Results_price_SP_D(Loop_Probability,S,D,T)
 850    Results_price_SP_G(Loop_Probability,S,G,T)
 851    Results_price_SP_nodal(Loop_Probability,S,N)
 852    Results_price_RD_Markup(Loop_Probability,S,results)
 853    Results_price_FI_nodal(Loop_Probability,S,N)
 854   
 855    Results_results_rents_A(Loop_Probability,S,results)
 856    Results_rents_PS(Loop_Probability,G,S)
 857    Results_profits_PS(Loop_Probability,G,S)
 858   
 859    Results_demand(Loop_Probability,S,N)
 860    Results_nodal(Loop_Probability,S,N,results)
 861   
        Results_nodal_welfare(Loop_Probability,S,N)
        Results_avgPriceSpot(Loop_Probability,S)
        Results_totalAvgPriceSpot(Loop_Probability)
        Results_demand(Loop_Probability,S,D,T)
       
        Results_rents_CS(Loop_Probability,D,S)
        Results_rediCost(Loop_Probability,S)
        Results_totalRediCost (Loop_Probability)
        Results_rediGenCost(Loop_Probability,S)
        Results_rediBuCost(Loop_Probability,S)
        Results_totalLineCapacity(Loop_Probability)
        Results_nodalAvgPriceSpot(Loop_Probability,S,N)
       
        Results_results_rents_N(Loop_Probability,S,N,results)
       
        Results_results_price_N(Loop_Probability,S,N,results)
        Results_results_price_A(Loop_Probability,S,results)
 881    ;
 882   
 883   
 884    Loop(LineInvest,
 885   
 886      maxWelfare(Loop_Probability)$(Loop_welfare_all(Loop_Probability,LineInvest)=smax(LineInvest2, Loop_welfare_all(Loop_Probability,LineInvest2) )) = LineInvest.val             ;
 887   
 888    );
 889   
 890    Results_genInv(Loop_Probability,G)                     = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_genInv(Loop_Probability, LineInvest, G) )         ;
 891    Results_lineInv(Loop_Probability)                      = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_lineInv(Loop_Probability, LineInvest) )           ;
 892   
 893    Results_welfare_sp_sc(Loop_Probability,S)              = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_sp_sc(Loop_Probability,LineInvest,S) )    ;
 894    Results_welfare_sp(Loop_Probability)                   = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_sp(Loop_Probability,LineInvest) )         ;
 895    Results_welfare_sp_TEST(Loop_Probability)              = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_sp_TEST(Loop_Probability,LineInvest) )    ;
 896    Results_welfare_sp_sc_d(Loop_Probability,S,D)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_sp_sc_d(Loop_Probability,LineInvest,S,D) );
 897   
 898    Results_welfare_all_sc(Loop_Probability,S)             = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_all_sc(Loop_Probability,LineInvest,S) )   ;
 899    Results_welfare_all(Loop_Probability)                  = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_welfare_all(Loop_Probability,LineInvest) )        ;
 900  *  Results_nodal_welfare(Loop_Probability,S,N)     = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_nodal_welfare(Loop_Probability,LineInvest,S,N)) ;
 901   
 902    Results_redispatch_sc(Loop_Probability,S)              = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_redispatch_sc(Loop_Probability, LineInvest,S) )   ;
 903    Results_redispatch_all(Loop_Probability)               = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_redispatch(Loop_Probability, LineInvest)      )   ;
 904    Results_redispatch_all_TEST(Loop_Probability)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_redispatch_TEST(Loop_Probability, LineInvest) )   ;
 905   
 906    Results_price_SP_D(Loop_Probability,S,D,T)             = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_price_SP_D(Loop_Probability,LineInvest,S,D,T) )   ;
 907    Results_price_SP_G(Loop_Probability,S,G,T)             = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_price_SP_G(Loop_Probability,LineInvest,S,G,T) )   ;
 908    Results_price_SP_nodal(Loop_Probability,S,N)           = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_price_SP_nodal(Loop_Probability,LineInvest,S,N) ) ;
 909    Results_price_RD_Markup(Loop_Probability,S,results)    = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_price_RD_Markup(Loop_Probability,LineInvest,S, results) )  ;
 910    Results_price_FI_nodal(Loop_Probability,S,N)           = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_price_Final(Loop_Probability,LineInvest,S,N) )    ;
 911   
 912    Results_results_rents_A(Loop_Probability,S,results)    = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_results_rents_A(Loop_Probability,LineInvest,S,results) )     ;
 913    Results_rents_PS(Loop_Probability,G,S)                 = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability) and Loop_genInv(Loop_Probability,LineInvest,G)), Loop_rents_PS(Loop_Probability,LineInvest,G,S))     ;
 914    Results_profits_PS(Loop_Probability,G,S)               = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability) and Loop_genInv(Loop_Probability,LineInvest,G)), Loop_profits_PS(Loop_Probability,LineInvest,G,S))     ;
 915   
 916    Results_demand(Loop_Probability,S,N)                   = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_Demand(Loop_Probability,LineInvest,S,N) )         ;
 917    Results_nodal(Loop_Probability,S,N,results)                    = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_Nodal(Loop_Probability,LineInvest,S,N,results) )          ;
 918   
 919   
        Results_avgPriceSpot(Loop_Probability,S)        = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_avgPriceSpot(Loop_Probability,LineInvest,S) )    ;
        Results_lineInvCost(Loop_Probability)           = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_lineInvCost(Loop_Probability,LineInvest) )       ;
        Results_genCost(Loop_Probability)               = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_genCost(Loop_Probability,LineInvest) )           ;
        Results_buCost(Loop_Probability)                = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_buCost(Loop_Probability,LineInvest) )            ;
        Results_buInv(Loop_Probability,B)               = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_buInv(Loop_Probability, LineInvest, B) )         ;
        Results_totalAvgPriceSpot(Loop_Probability)     = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_totalAvgPriceSpot(Loop_Probability, LineInvest)) ;
       
        Results_rents_CS(Loop_Probability,D,S)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_rents_CS(Loop_Probability,LineInvest,D,S))       ;
       
        Results_rediCost(Loop_Probability,S)            = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_rediCost(Loop_Probability,LineInvest,S) )        ;
        Results_totalRediCost(Loop_Probability)         = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_totalRediCost(Loop_Probability,LineInvest) )     ;
        Results_rediGenCost(Loop_Probability,S)         = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_rediGenCost(Loop_Probability,LineInvest,S) )     ;
        Results_rediBuCost(Loop_Probability,S)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_rediBuCost(Loop_Probability,LineInvest,S) )      ;
        Results_flowFinal(Loop_Probability, S,L,T)      = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_flowFinal(Loop_Probability,LineInvest,S,L,T) )   ;
        Results_generationBU(Loop_Probability, S,B,T)   = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_generationBU(Loop_Probability,LineInvest,S,B,T) );
        Results_generation(Loop_Probability, S,G,T)     = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_generation(Loop_Probability,LineInvest,S,G,T) )  ;
        Results_totalLineCapacity(Loop_Probability)     = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_totalLineCapacity(Loop_Probability,LineInvest) ) ;
        Results_avgGenUtilization(Loop_Probability,S,G) = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_avgGenUtilization(Loop_Probability,LineInvest, S,G) ) ;
        Results_avgLineUtilization(Loop_Probability,S)  = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_avgLineUtilization(Loop_Probability,LineInvest,S) )   ;
        Results_avgBuUtilization(Loop_Probability,S,B)  = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_avgBuUtilization(Loop_Probability,LineInvest, S,B) )  ;
        Results_nodalAvgPriceSpot(Loop_Probability,S,N) = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_nodalAvgPriceSpot(Loop_Probability,LineInvest, S,N) ) ;
        Results_networkFee(Loop_Probability,S)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_networkFee(Loop_Probability,LineInvest, S) )          ;
        Results_networkRev(Loop_Probability,S)          = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_networkRev(Loop_Probability,LineInvest,S) )           ;
       
        Results_results_rents_N(Loop_Probability,S,N,results) = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_results_rents_N(Loop_Probability,LineInvest,S,N,results) ) ;
       
        Results_results_price_N(Loop_Probability,S,N,results) = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_results_price_N(Loop_Probability,LineInvest,S,N,results) ) ;
        Results_results_price_A(Loop_Probability,S,results)   = sum(LineInvest$(ord(LineInvest)=maxWelfare(Loop_Probability)), Loop_results_price_A(Loop_Probability,LineInvest,S,results) )     ;
 950   
 951  *$include OutputWriter.gms
GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\ba62very\MyGit\risk-aversion\GAMS\2Nodes.gms
     2       45 INCLUDE        1      45  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\Input_2Nodes.gms
     3      145 CALL           2     100  .csv2gdx Data/InputRES_wind.txt id=avail Index=1 Value='(2..9)' UseHeader=Y StoreZero=Y FieldSep=Tab Output=input.gdx
     4      146 GDXIN          2     101  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
     5      150 CALL           2     105  .csv2gdx Data/Input_HourlyValues_wind.txt id=periodScale Index=1 Value=2 UseHeader=Y StoreZero=Y FieldSep=Tab Output=input.gdx
     6      151 GDXIN          2     106  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
     7      155 CALL           2     110  .csv2gdx Data/Input_HourlyValues_wind.txt id=dRef Index=1 Value=3 UseHeader=Y StoreZero=Y FieldSep=Tab Output=input.gdx
     8      156 GDXIN          2     111  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
     9      160 CALL           2     115  .csv2gdx Data/Input_HourlyValues_wind.txt id=pRef Index=1 Value=4 UseHeader=Y StoreZero=Y FieldSep=Tab Output=input.gdx
    10      161 GDXIN          2     116  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\input.gdx
    11      169 INCLUDE        1      46  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\Parameters_2Nodes.gms
    12      307 INCLUDE        1      47  .C:\Users\ba62very\MyGit\risk-aversion\GAMS\model-risk-aversion.gms


COMPILATION TIME     =        0.078 SECONDS      3 MB  25.1.3 r4e34d435fbd WEX-WEI
GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE Spotmarket Using QCP From line 553


LOOPS                           Loop_Probability   1
                                LineInvest   1


MODEL STATISTICS

BLOCKS OF EQUATIONS           7     SINGLE EQUATIONS        9,201
BLOCKS OF VARIABLES           7     SINGLE VARIABLES        8,411
NON ZERO ELEMENTS        19,211     NON LINEAR N-Z              0
DERIVATIVE POOL              20     CONSTANT POOL             187
CODE LENGTH                   0


GENERATION TIME      =        0.016 SECONDS      7 MB  25.1.3 r4e34d435fbd WEX-WEI


EXECUTION TIME       =        0.016 SECONDS      7 MB  25.1.3 r4e34d435fbd WEX-WEI
               L O O P S         Loop_Probability 1
                                 LineInvest 1

GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE Spotmarket Using QCP From line 553


               S O L V E      S U M M A R Y

     MODEL   Spotmarket          OBJECTIVE  welfareSpot
     TYPE    QCP                 DIRECTION  MAXIMIZE
     SOLVER  GUROBI              FROM LINE  553

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE               NA

 RESOURCE USAGE, LIMIT          0.003     10000.000
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS             NA             0
Gurobi link license.
Gurobi library version 8.1.0
Space for names approximately 0.38 Mb
LP status(4): Model was proven to be either infeasible or unbounded.
***
*** Gurobi reports the model to be either infeasible or unbounded.
*** Use option 'rerun 1' in a GAMS/Gurobi option file
*** to determine the primal solution status.
***

No solution returned
GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE Redispatch Using LP From line 597


LOOPS                           Loop_Probability   1
                                LineInvest   1


MODEL STATISTICS

BLOCKS OF EQUATIONS          14     SINGLE EQUATIONS       19,201
BLOCKS OF VARIABLES          11     SINGLE VARIABLES       15,205
NON ZERO ELEMENTS        41,605


GENERATION TIME      =        0.047 SECONDS      8 MB  25.1.3 r4e34d435fbd WEX-WEI


EXECUTION TIME       =        0.047 SECONDS      8 MB  25.1.3 r4e34d435fbd WEX-WEI
               L O O P S         Loop_Probability 1
                                 LineInvest 1

GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE Redispatch Using LP From line 597


               S O L V E      S U M M A R Y

     MODEL   Redispatch          OBJECTIVE  costRedispatch
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  GUROBI              FROM LINE  597

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      14 No Solution Returned     
**** OBJECTIVE VALUE               NA

 RESOURCE USAGE, LIMIT          0.006     36000.000
 ITERATION COUNT, LIMIT         0    2000000000
Gurobi link license.
Gurobi library version 8.1.0
Space for names approximately 0.74 Mb
LP status(4): Model was proven to be either infeasible or unbounded.
***
*** Gurobi reports the model to be either infeasible or unbounded.
*** Use option 'rerun 1' in a GAMS/Gurobi option file
*** to determine the primal solution status.
***

No solution returned
GAMS 25.1.3  r4e34d435fbd Released Oct 30, 2018 WEX-WEI x86 64bit/MS Windows - 03/12/19 14:57:52 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


----    613 PARAMETER Test                 =        0.000  
**** Exec Error at line 675: division by zero (0)
**** Exec Error at line 712: division by zero (0)
**** Exec Error at line 713: division by zero (0)
**** Exec Error at line 714: division by zero (0)
**** Exec Error at line 715: division by zero (0)
**** Exec Error at line 725: division by zero (0)
**** Exec Error at line 726: division by zero (0)
**** Exec Error at line 727: division by zero (0)
**** Exec Error at line 728: division by zero (0)

**** SOLVE from line 553 SKIPPED, EXECERROR = 9

**** SOLVE from line 597 SKIPPED, EXECERROR = 9

----    613 PARAMETER Test                 =      250.000  

**** SOLVE from line 553 SKIPPED, EXECERROR = 9

**** SOLVE from line 597 SKIPPED, EXECERROR = 9

----    613 PARAMETER Test                 =      500.000  

**** SOLVE from line 553 SKIPPED, EXECERROR = 9

**** SOLVE from line 597 SKIPPED, EXECERROR = 9

----    613 PARAMETER Test                 =        0.000  

**** SOLVE from line 553 SKIPPED, EXECERROR = 9

**** SOLVE from line 597 SKIPPED, EXECERROR = 9

----    613 PARAMETER Test                 =      250.000  

**** SOLVE from line 553 SKIPPED, EXECERROR = 9

**** SOLVE from line 597 SKIPPED, EXECERROR = 9

----    613 PARAMETER Test                 =      500.000  


EXECUTION TIME       =        0.047 SECONDS      4 MB  25.1.3 r4e34d435fbd WEX-WEI


USER: Small MUD - 5 User License                     S181102:0656AO-WIN
      Friedrich-Alexander-Universitaet Erlangen-Nurnberg, Chair DC12906
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\ba62very\MyGit\risk-aversion\GAMS\2Nodes.gms
Output     C:\Users\ba62very\MyGit\risk-aversion\GAMS\2Nodes.lst

**** USER ERROR(S) ENCOUNTERED
